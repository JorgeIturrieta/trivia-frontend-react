{"version":3,"sources":["routes/PublicRouter.tsx","hooks/useForm.tsx","graphql/mutations/loginUser.tsx","cache.tsx","components/AuthContainer.tsx","components/AuthBoxContainer.tsx","components/AuthInput.tsx","components/AuthBtn.tsx","components/TitleAuth.tsx","components/LoginScreen.tsx","routes/PrivateRouter.tsx","graphql/queries/getCategories.tsx","components/CategoryCarousel.tsx","components/CategoryScreen.tsx","components/Containers.tsx","components/LogoutScreen.tsx","components/Menu.tsx","components/Home.tsx","graphql/queries/randomQuestion.tsx","components/Button.tsx","helpers/formatTime.tsx","components/Timer.tsx","components/Answers.tsx","graphql/mutations/addScore.tsx","components/RandomQuestion.tsx","graphql/mutations/registerUser.tsx","components/RegisterScreen.tsx","graphql/queries/getScores.tsx","components/StyleTable.tsx","components/ScoreScreen.tsx","routes/AppRouter.tsx","App.tsx","index.tsx","utils/config-env.tsx"],"names":["PublicRouter","children","isLoggedIn","rest","render","location","to","pathname","state","from","useForm","form","useState","setstate","onChange","field","value","LOGIN","gql","isLoggedInVar","makeVar","localStorage","getItem","userScoreVar","userTimeVar","cache","InMemoryCache","typePolicies","Query","fields","read","userScore","userTime","AuthContainer","styled","div","AuthBoxContainer","AuthInput","input","AuthBtn","button","TitleAuth","h1","LoginScreen","client","useApolloClient","email","password","useMutation","variables","loginInput","username","login","data","error","useEffect","setItem","token","submit","event","a","preventDefault","resetStore","console","log","onSubmit","type","name","placeholder","autoComplete","target","className","JSON","stringify","message","PrivateRouter","GET_CATEGORIES","CategoryCarousel","categories","map","c","src","alt","id","CategoryScreen","useQuery","loading","getCategories","HeaderWrapper","header","Title","ContainerQuestion","ContainerAnswers","ContainerBtn","ContainerImg","NumberQuestion","p","TimeContainer","Score","ImgQuestion","img","ContainerTitle","props","backgroundColor","LogoutScreen","onClick","removeItem","Menu","activeStyle","color","Home","GET_RANDOM_QUESTIONS","Button","inputColor","NextButton","formatTime","secondsTime","minutes","Math","floor","hours","String","padStart","Timer","time","setTime","timeOut","setTimeOut","timer","setInterval","s","clearInterval","Answers","question","setNextQuestion","numberQuestion","loadNextQuestion","setLoadNextQuestion","score","setScore","answerSelected","setAnswerSelected","setColor","isClicked","setIsClicked","title","image","answers","correctAnswer","ADD_SCORE","RandomQuestion","categoryId","useParams","randomInput","idCategory","count","setCount","useReactiveVar","scoreInput","addScore","handleScore","useCallback","randomQuestions","length","REGISTER","RegisterScreen","signUpInput","signUp","GET_SCORES","StyleTable","ScoreScreen","searchScoreInput","fetchPolicy","getScores","i","user","moment","utc","createdAt","local","format","AppRouter","exact","path","App","httpLink","createHttpLink","uri","process","authLink","setContext","_","headers","authorization","ApolloClient","link","concat","version","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.e3706df8.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Redirect, Route } from 'react-router';\ntype PublicRouterProps = {\n  path: string;\n  exact: boolean;\n  isLoggedIn: boolean;\n};\nexport const PublicRouter: FunctionComponent<PublicRouterProps> = ({\n  children,\n  isLoggedIn,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        !isLoggedIn ? (\n          children\n        ) : (\n          <Redirect to={{ pathname: '/', state: { from: location } }} />\n        )\n      }\n    />\n  );\n};\n","import { useState } from 'react';\n\nexport const useForm = <T extends Object>(form: T) => {\n  const [state, setstate] = useState(form);\n  const onChange = (field: keyof T, value: string) => {\n    setstate({\n      ...state,\n      [field]: value,\n    });\n  };\n\n  return {\n    ...state,\n    onChange,\n  };\n};\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($loginInput: LoginInput!) {\n    login(loginInput: $loginInput) {\n      token\n    }\n  }\n`;\n\nexport interface IloginInput {\n  username: string;\n  password: string;\n}\n\nexport interface Ilogin {\n  token: string;\n}\n","import { InMemoryCache } from '@apollo/client';\nimport { makeVar } from '@apollo/client';\nexport const isLoggedInVar = makeVar(!!localStorage.getItem('token'));\nexport const userScoreVar = makeVar(0);\nexport const userTimeVar = makeVar(0);\nexport const cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        isLoggedIn: {\n          read() {\n            return isLoggedInVar();\n          },\n        },\n        userScore: {\n          read() {\n            return userScoreVar();\n          },\n        },\n        userTime: {\n          read() {\n            return userTimeVar();\n          },\n        },\n      },\n    },\n  },\n});\n","import styled from 'styled-components';\nexport const AuthContainer = styled.div`\n  display: flex;\n  background-color: #5c62c5;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n`;\n","import styled from 'styled-components';\nexport const AuthBoxContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  padding: 20px;\n  width: 250px;\n  background-color: white;\n  border-radius: 7px;\n  -webkit-box-shadow: 0px 9px 28px 0px rgba(0, 0, 0, 0.75);\n  -moz-box-shadow: 0px 9px 28px 0px rgba(0, 0, 0, 0.75);\n  box-shadow: 0px 9px 28px 0px rgba(0, 0, 0, 0.75);\n`;\n","import styled from 'styled-components';\nexport const AuthInput = styled.input`\n  border: 1px solid grey;\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 7px 3px;\n  border-radius: 5px;\n`;\n","import styled from 'styled-components';\nexport const AuthBtn = styled.button`\n  padding: 7px 3px;\n  color: white;\n  border: 3px;\n  background-color: #5c62c5;\n  width: 100%;\n  display: block;\n  margin-bottom: 1em;\n  border-radius: 5px;\n`;\n","import styled from 'styled-components';\nexport const TitleAuth = styled.h1`\n  color: #5c62c5;\n  font-size: 500;\n`;\n","import { useApolloClient, useMutation } from '@apollo/client';\nimport { useForm } from '../hooks/useForm';\nimport { LOGIN, Ilogin, IloginInput } from '../graphql/mutations/loginUser';\nimport { isLoggedInVar } from '../cache';\nimport { useEffect } from 'react';\nimport { AuthContainer } from './AuthContainer';\nimport { AuthBoxContainer } from './AuthBoxContainer';\nimport { AuthInput } from './AuthInput';\nimport { AuthBtn } from './AuthBtn';\nimport { TitleAuth } from './TitleAuth';\nimport { Link } from 'react-router-dom';\nexport const LoginScreen = () => {\n  const client = useApolloClient();\n\n  const { email, password, onChange } = useForm({\n    email: 'test@test.com',\n    password: '12345',\n  });\n\n  const [login, { data, error }] = useMutation<\n    { login: Ilogin },\n    { loginInput: IloginInput }\n  >(LOGIN, {\n    variables: { loginInput: { password, username: email } },\n  });\n\n  useEffect(() => {\n    if (data?.login) {\n      localStorage.setItem('token', data.login.token);\n      isLoggedInVar(!!localStorage.getItem('token'));\n    }\n  }, [data]);\n\n  const submit = async (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    try {\n      await login();\n      await client.resetStore();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <AuthContainer>\n      <AuthBoxContainer>\n        <TitleAuth>Trivia App</TitleAuth>\n        <form onSubmit={submit}>\n          <AuthInput\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"correo\"\n            value={email}\n            autoComplete=\"off\"\n            onChange={({ target }) => onChange('email', target.value)}\n          />\n\n          <AuthInput\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"contraseña\"\n            value={password}\n            onChange={({ target }) => onChange('password', target.value)}\n          />\n\n          <AuthBtn type=\"submit\"> Iniciar sesión </AuthBtn>\n          <hr />\n          <Link to=\"/register\" className=\"link\">\n            Registrarse\n          </Link>\n        </form>\n        {/* <code>\n          <pre> {JSON.stringify({ email, password }, null, 2)}</pre>\n        </code>\n        {data?.login && (\n          <code>\n            <pre> {JSON.stringify({ token: data.login.token }, null, 2)}</pre>\n          </code>\n        )} */}\n        {error ? <p>Oh no! {JSON.stringify(error.message, null, 2)}</p> : null}\n      </AuthBoxContainer>\n    </AuthContainer>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Redirect, Route } from 'react-router';\ntype PrivateRouterProps = {\n  path: string;\n  exact: boolean;\n  isLoggedIn: boolean;\n};\nexport const PrivateRouter: FunctionComponent<PrivateRouterProps> = ({\n  children,\n  isLoggedIn,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isLoggedIn ? (\n          children\n        ) : (\n          <Redirect to={{ pathname: '/login', state: { from: location } }} />\n        )\n      }\n    />\n  );\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_CATEGORIES = gql`\n  query GetCategory {\n    getCategories {\n      name\n      id\n    }\n  }\n`;\nexport interface Icategory {\n  id: string;\n  name: string;\n}\nexport interface IcategoryData {\n  getCategories: Icategory[];\n}\n","import React, { FunctionComponent } from 'react';\nimport { Icategory } from '../graphql/queries/getCategories';\nimport { Carousel } from 'react-responsive-carousel';\nimport { Link } from 'react-router-dom';\ntype CarouselProps = {\n  categories: Icategory[];\n};\nexport const CategoryCarousel: FunctionComponent<CarouselProps> = ({\n  categories,\n}: CarouselProps) => {\n  return (\n    <Carousel>\n      {categories.map((c) => (\n        <div key={c.id}>\n          <img\n            src=\"https://res.cloudinary.com/dhklxujxz/image/upload/v1632090154/trivia/ginobili_qmqciw.jpg\"\n            alt={c.name}\n          />\n          <Link to={`./questions/${c.id}`}>\n            <p className=\"legend\">{c.name}</p>\n          </Link>\n        </div>\n      ))}\n    </Carousel>\n  );\n};\n","import { useQuery } from '@apollo/client';\nimport {\n  GET_CATEGORIES,\n  IcategoryData,\n} from '../graphql/queries/getCategories';\nimport { CategoryCarousel } from './CategoryCarousel';\n\nexport const CategoryScreen = () => {\n  const { loading, data } = useQuery<IcategoryData>(GET_CATEGORIES);\n\n  return (\n    <>\n      {loading && <p>Cargando...</p>}\n      {data && <CategoryCarousel categories={data?.getCategories} />}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\ninterface ContainerProps {\n  readonly backgroundColor: string;\n}\n\nexport const HeaderWrapper = styled.header`\n  background-color: #8cc7f7;\n  padding: 0.5em 2em;\n  width: 100%;\n  position: sticky;\n  top: 0;\n  overflow: hidden;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  h1 {\n    text-decoration: none;\n    display: inline-block;\n    margin: 0;\n    text-align: left;\n    font-size: clamp(1.5rem, 2.5vw, 2rem);\n  }\n\n  span {\n    cursor: pointer;\n    font-size: clamp(0.7rem, 2.5vw, 1rem);\n  }\n`;\n\nexport const Title = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-size: clamp(1.5rem, 2.5vw, 2rem);\n`;\nexport const ContainerQuestion = styled.div`\n  display: grid;\n  max-width: 500px;\n  margin: 0 auto;\n  border-radius: 5px;\n  grid-gap: 0.5rem;\n  padding: 2px 10px;\n`;\n\nexport const ContainerAnswers = styled.div`\n  border-radius: inherit;\n  background-color: #8cc7f7;\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(12rem, 1fr));\n`;\n\nexport const ContainerBtn = styled.div`\n  text-align: center;\n  padding: 1rem;\n`;\n\nexport const ContainerImg = styled.div`\n  border-radius: 5px;\n  position: relative;\n  z-index: -1;\n`;\n\nexport const NumberQuestion = styled.p`\n  position: absolute;\n  color: white;\n  left: 0;\n  margin: 10px;\n  background-color: red;\n  padding: 5px 8px;\n  border-radius: 10px;\n  border: 2px solid;\n`;\n\nexport const TimeContainer = styled.p`\n  position: absolute;\n  color: white;\n  right: 0;\n  //text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;\n  bottom: 0;\n  margin: 10px;\n  background-color: green;\n  padding: 5px 8px;\n  border: 2px solid;\n  border-radius: 10px;\n`;\n\nexport const Score = styled.p`\n  position: absolute;\n  background-color: green;\n  border: 2px solid;\n  color: white;\n  right: 0;\n  margin: 10px;\n  padding: 5px 5px;\n  border-radius: 10px;\n`;\nexport const ImgQuestion = styled.img`\n  width: 100%;\n  object-fit: cover;\n  border-radius: inherit;\n`;\n\nexport const ContainerTitle = styled.div<ContainerProps>`\n  /* background-color: #393e46; */\n  margin-top: 1em;\n  background-color: ${(props) =>\n    props.backgroundColor ? props.backgroundColor : '#393e46'};\n  color: ${(props) => (props.backgroundColor ? 'black' : 'white')};\n  padding: 0.5rem;\n  text-align: center;\n  border-radius: inherit;\n  //font-size: clamp(1rem, 2.5vw, 2em);\n`;\n","import React from 'react';\nimport { isLoggedInVar } from '../cache';\n\nexport const LogoutScreen = () => {\n  const handleLogout = () => {\n    localStorage.removeItem('token');\n    isLoggedInVar(!!localStorage.getItem('token'));\n  };\n  return (\n    <div>\n      <span onClick={handleLogout}>Cerrar Sesión</span>\n    </div>\n  );\n};\n","import React from 'react';\nimport { HeaderWrapper } from './Containers';\nimport { NavLink } from 'react-router-dom';\nimport { LogoutScreen } from './LogoutScreen';\nexport const Menu = () => {\n  return (\n    <HeaderWrapper>\n      <NavLink to={'/'} className=\"tags\" activeStyle={{ color: 'black' }}>\n        <h1>Trivia App</h1>\n      </NavLink>\n\n      <LogoutScreen />\n    </HeaderWrapper>\n  );\n};\n","import React from 'react';\nimport { CategoryScreen } from './CategoryScreen';\nimport { Menu } from './Menu';\n\nexport const Home = () => {\n  return (\n    <>\n      <Menu />\n      <CategoryScreen />\n    </>\n  );\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_RANDOM_QUESTIONS = gql`\n  query GetRandomQuestions($randomInput: RandomInput!) {\n    randomQuestions(randomInput: $randomInput) {\n      title\n      correctAnswer\n      image\n      answers {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport interface IRandomQuestionInput {\n  idCategory: string;\n}\nexport interface IAnswer {\n  id: string;\n  title: string;\n}\nexport interface IRandomQuestion {\n  title: string;\n  image: string;\n  correctAnswer: string;\n  answers: IAnswer[];\n}\nexport interface IRandomQuestionData {\n  randomQuestions: IRandomQuestion[];\n}\n","import styled from 'styled-components';\ninterface ButtonProps {\n  readonly inputColor: string;\n}\nexport const Button = styled.button<ButtonProps>`\n  background-color: ${(props) =>\n    props.inputColor ? props.inputColor : '#393e46'};\n  border: 3px solid white;\n  width: 200px;\n  color: ${(props) => (props.inputColor ? 'black' : 'white')};\n  border-radius: 5px;\n  padding: 1em;\n  font-size: 1rem;\n  cursor: pointer;\n`;\n\nexport const NextButton = styled.button`\n  padding-top: 1rem;\n  background-color: #393e46;\n  color: white;\n  font-size: 1em;\n  margin: 1em;\n  border: 0;\n  padding: 1em 1em;\n  border-radius: 10px;\n  cursor: pointer;\n`;\n","export const formatTime = (secondsTime: number): string => {\n  let minutes = Math.floor(secondsTime / 60);\n  secondsTime = secondsTime % 60;\n  const hours = Math.floor(minutes / 60);\n  minutes = minutes % 60;\n  return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(\n    2,\n    '0',\n  )}:${String(secondsTime).padStart(2, '0')}`;\n};\n","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { formatTime } from '../helpers/formatTime';\nimport { TimeContainer } from './Containers';\ntype TimerProps = {\n  time: number;\n  setTime: React.Dispatch<React.SetStateAction<number>>;\n};\nexport const Timer = ({ time, setTime }: TimerProps) => {\n  const [timeOut, setTimeOut] = useState<NodeJS.Timeout>();\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTime((s) => s + 1);\n    }, 1000);\n    setTimeOut(timer);\n    return () => {\n      if (timeOut) {\n        clearInterval(timeOut);\n      }\n    };\n  }, []); // eslint-disable-line\n\n  return (\n    <>\n      <TimeContainer>\n        <span>{formatTime(time)}</span>\n      </TimeContainer>\n    </>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { IRandomQuestion } from '../graphql/queries/randomQuestion';\nimport { useState } from 'react';\nimport { Button, NextButton } from './Button';\nimport { userScoreVar, userTimeVar } from '../cache';\nimport {\n  NumberQuestion,\n  Score,\n  ContainerAnswers,\n  ContainerBtn,\n  ImgQuestion,\n  ContainerTitle,\n  ContainerImg,\n} from './Containers';\nimport { Timer } from './Timer';\nimport { Title } from './Containers';\n\ntype AnswerProps = {\n  question: IRandomQuestion;\n  setNextQuestion: React.Dispatch<React.SetStateAction<number>>;\n  numberQuestion: number;\n};\nexport const Answers: FunctionComponent<AnswerProps> = ({\n  question,\n  setNextQuestion,\n  numberQuestion,\n}) => {\n  const [loadNextQuestion, setLoadNextQuestion] = useState(false);\n  const [score, setScore] = useState(0);\n  const [answerSelected, setAnswerSelected] = useState('');\n  const [color, setColor] = useState('');\n  const [isClicked, setIsClicked] = useState(false);\n  const [time, setTime] = useState(0);\n  const handleNextQuestion = () => {\n    setColor('');\n    setNextQuestion((c) => c + 1);\n    userScoreVar(score);\n    userTimeVar(time);\n    setLoadNextQuestion(false);\n    setIsClicked(false);\n  };\n  const handleAnswer = (id: string) => {\n    if (!loadNextQuestion) {\n      setIsClicked(true);\n      setLoadNextQuestion(true);\n      setAnswerSelected(id);\n      if (id === question.correctAnswer) {\n        setScore(score + 10);\n\n        setColor('#48e3b0');\n        console.log('Respuesta correcta :)');\n      } else {\n        setColor('#E55665');\n      }\n    }\n  };\n\n  return (\n    <>\n      <ContainerTitle backgroundColor={color}>\n        <Title>{question.title}</Title>\n      </ContainerTitle>\n\n      <ContainerImg>\n        <NumberQuestion>{numberQuestion}/10</NumberQuestion>\n\n        <Timer time={time} setTime={setTime} />\n\n        <Score>{score} puntos</Score>\n        <ImgQuestion src={question.image} alt={question.title} />\n      </ContainerImg>\n\n      <ContainerAnswers>\n        {question.answers.map((a) => {\n          return (\n            <ContainerBtn key={a.id}>\n              <Button\n                inputColor={\n                  (a.id === answerSelected ? color : '') ||\n                  (a.id === question.correctAnswer && isClicked\n                    ? '#48e3b0'\n                    : '')\n                }\n                key={a.id}\n                onClick={() => handleAnswer(a.id)}\n              >\n                {a.title}\n              </Button>\n            </ContainerBtn>\n          );\n        })}\n      </ContainerAnswers>\n\n      {loadNextQuestion && (\n        <>\n          <NextButton onClick={handleNextQuestion}>Continuar</NextButton>\n        </>\n      )}\n    </>\n  );\n};\n","import { gql } from '@apollo/client';\n\nexport const ADD_SCORE = gql`\n  mutation addScore($scoreInput: ScoreInput!) {\n    addScore(scoreInput: $scoreInput) {\n      score\n    }\n  }\n`;\n\nexport interface IAddScore {\n  score: string;\n}\n\nexport interface IScoreInput {\n  idCategory: string;\n  score: number;\n  time: number;\n}\n","import { useParams } from 'react-router';\nimport { useMutation, useQuery, useReactiveVar } from '@apollo/client';\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  IRandomQuestionData,\n  GET_RANDOM_QUESTIONS,\n  IRandomQuestionInput,\n} from '../graphql/queries/randomQuestion';\nimport { Answers } from './Answers';\n// import { LogoutScreen } from './LogoutScreen';\nimport { userScoreVar, userTimeVar } from '../cache';\nimport {\n  ADD_SCORE,\n  IAddScore,\n  IScoreInput,\n} from '../graphql/mutations/addScore';\nimport { ContainerQuestion } from './Containers';\nimport { Link } from 'react-router-dom';\nimport { Menu } from './Menu';\n\ntype Params = {\n  categoryId: string;\n};\n\nexport const RandomQuestion = () => {\n  const { categoryId } = useParams<Params>();\n\n  const { loading, data, error } = useQuery<\n    IRandomQuestionData,\n    { randomInput: IRandomQuestionInput }\n  >(GET_RANDOM_QUESTIONS, {\n    variables: { randomInput: { idCategory: categoryId } },\n  });\n\n  const [count, setCount] = useState(0);\n  const score = useReactiveVar(userScoreVar);\n  const time = useReactiveVar(userTimeVar);\n  const [addScore] = useMutation<\n    { addScore: IAddScore },\n    { scoreInput: IScoreInput }\n  >(ADD_SCORE, {\n    variables: { scoreInput: { idCategory: categoryId, time, score } },\n  });\n\n  const handleScore = useCallback(async () => {\n    await addScore();\n  }, [addScore]);\n\n  useEffect(() => {\n    if (data?.randomQuestions.length) {\n      if (data?.randomQuestions.length - 1 < count) {\n        handleScore();\n      }\n    }\n    return () => {\n      console.log('componente desmontado');\n    };\n  }, [count, data, handleScore]);\n\n  return (\n    <>\n      <Menu />\n      {loading ? (\n        <p>Cargando...</p>\n      ) : (\n        <ContainerQuestion>\n          {data?.randomQuestions && (\n            <>\n              {data?.randomQuestions.length - 1 >= count && (\n                <Answers\n                  question={data?.randomQuestions[count]}\n                  setNextQuestion={setCount}\n                  numberQuestion={count + 1}\n                />\n              )}\n\n              {data.randomQuestions.length > 0 &&\n                data?.randomQuestions.length - 1 < count && (\n                  <>\n                    <p>¡Felcitaciones trivia completada!</p>\n                    <Link to={`/scores/${categoryId}`}>Ver resultados</Link>\n                  </>\n                )}\n\n              {data.randomQuestions.length === 0 && (\n                <>\n                  <p>Esta categoría aun no tiene pregutas</p>\n                </>\n              )}\n            </>\n          )}\n        </ContainerQuestion>\n      )}\n      {error && <span>{error.message}</span>}\n    </>\n  );\n};\n","import { gql } from '@apollo/client';\n\nexport const REGISTER = gql`\n  mutation signUp($signUpInput: SignUpInput!) {\n    signUp(signUpInput: $signUpInput) {\n      token\n    }\n  }\n`;\n\nexport interface IRegisterInput {\n  email: string;\n  username: string;\n  password: string;\n}\n\nexport interface IRegister {\n  token: string;\n}\n","import { useApolloClient, useMutation } from '@apollo/client';\nimport { useForm } from '../hooks/useForm';\nimport { isLoggedInVar } from '../cache';\nimport { useEffect } from 'react';\nimport { AuthContainer } from './AuthContainer';\nimport { AuthBoxContainer } from './AuthBoxContainer';\nimport { AuthInput } from './AuthInput';\nimport { AuthBtn } from './AuthBtn';\nimport { TitleAuth } from './TitleAuth';\nimport {\n  IRegister,\n  IRegisterInput,\n  REGISTER,\n} from '../graphql/mutations/registerUser';\n\nexport const RegisterScreen = () => {\n  const client = useApolloClient();\n\n  const { username, email, password, onChange } = useForm({\n    username: '',\n    email: '',\n    password: '',\n  });\n\n  const [signUp, { data, error }] = useMutation<\n    { signUp: IRegister },\n    { signUpInput: IRegisterInput }\n  >(REGISTER, {\n    variables: { signUpInput: { password, username, email } },\n  });\n\n  useEffect(() => {\n    if (data?.signUp) {\n      localStorage.setItem('token', data.signUp.token);\n      isLoggedInVar(!!localStorage.getItem('token'));\n    }\n  }, [data]);\n\n  const submit = async (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    try {\n      await signUp();\n      await client.resetStore();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <AuthContainer>\n      <AuthBoxContainer>\n        <TitleAuth>Trivia App</TitleAuth>\n        <form onSubmit={submit}>\n          <AuthInput\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"nombre de usuario\"\n            value={username}\n            autoComplete=\"off\"\n            onChange={({ target }) => onChange('username', target.value)}\n          />\n          <AuthInput\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"correo\"\n            value={email}\n            autoComplete=\"off\"\n            onChange={({ target }) => onChange('email', target.value)}\n          />\n\n          <AuthInput\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"contraseña\"\n            value={password}\n            onChange={({ target }) => onChange('password', target.value)}\n          />\n\n          <AuthBtn type=\"submit\"> Registrar </AuthBtn>\n        </form>\n        {/* <code>\n          <pre> {JSON.stringify({ email, password }, null, 2)}</pre>\n        </code>\n        {data?.login && (\n          <code>\n            <pre> {JSON.stringify({ token: data.login.token }, null, 2)}</pre>\n          </code>\n        )} */}\n        {error ? <p>Oh no! {JSON.stringify(error.message, null, 2)}</p> : null}\n      </AuthBoxContainer>\n    </AuthContainer>\n  );\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_SCORES = gql`\n  query GetScores($searchScoreInput: SearchScoreInput!) {\n    getScores(searchScoreInput: $searchScoreInput) {\n      createdAt\n      time\n      score\n      user {\n        name\n      }\n    }\n  }\n`;\n\nexport interface SearchScoreInput {\n  idCategory: string;\n}\ninterface IUser {\n  name: string;\n}\n\nexport interface Scores {\n  createdAt: string;\n  time: number;\n  score: number;\n  user: IUser;\n}\n\nexport interface IScoreData {\n  getScores: Scores[];\n}\n","import styled from 'styled-components';\n\nexport const StyleTable = styled.div`\n  padding: 1rem;\n  overflow-x: auto;\n  margin: 0 20px;\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    margin-left: auto;\n    margin-right: auto;\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      text-align: center;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n","import { useQuery } from '@apollo/client';\nimport { useParams } from 'react-router';\nimport {\n  GET_SCORES,\n  IScoreData,\n  SearchScoreInput,\n} from '../graphql/queries/getScores';\nimport { StyleTable } from './StyleTable';\nimport moment from 'moment';\nimport { formatTime } from '../helpers/formatTime';\nimport { Title } from './Containers';\nimport { Menu } from './Menu';\n\ntype Params = {\n  categoryId: string;\n};\nexport const ScoreScreen = () => {\n  const { categoryId } = useParams<Params>();\n\n  const { loading, data, error } = useQuery<\n    IScoreData,\n    { searchScoreInput: SearchScoreInput }\n  >(GET_SCORES, {\n    variables: { searchScoreInput: { idCategory: categoryId } },\n    fetchPolicy: 'no-cache',\n  });\n  return (\n    <>\n      <Menu />\n      <Title>Tabla de puntuaciones</Title>\n\n      {loading && <p>Cargando...</p>}\n\n      {data && (\n        <StyleTable>\n          <table>\n            <thead>\n              <tr>\n                <th>Ranking</th>\n                <th>Usuario</th>\n                <th>Puntuación</th>\n                <th>Tiempo</th>\n                <th>Fecha</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.getScores.map((score, i) => (\n                <tr key={i}>\n                  <td>{i + 1}</td>\n                  <td>{score.user.name}</td>\n                  <td>{score.score}</td>\n                  <td>{formatTime(score.time)}</td>\n                  <td>\n                    {moment\n                      .utc(score.createdAt)\n                      .local()\n                      .format('DD-MM-YYYY HH:mm:ss ')}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </StyleTable>\n      )}\n\n      {error && <span>{error.message}</span>}\n    </>\n  );\n};\n","import { HashRouter, Switch } from 'react-router-dom';\nimport { PublicRouter } from './PublicRouter';\nimport { LoginScreen } from '../components/LoginScreen';\nimport { PrivateRouter } from './PrivateRouter';\nimport { Home } from '../components/Home';\nimport { Redirect } from 'react-router';\nimport { useReactiveVar } from '@apollo/client';\nimport { isLoggedInVar } from '../cache';\nimport { RandomQuestion } from '../components/RandomQuestion';\nimport { RegisterScreen } from '../components/RegisterScreen';\nimport { ScoreScreen } from '../components/ScoreScreen';\nexport const AppRouter = () => {\n  const isLoggedIn = useReactiveVar(isLoggedInVar);\n  console.log(isLoggedIn);\n  return (\n    <HashRouter>\n      <div>\n        <Switch>\n          <PublicRouter exact path=\"/login\" isLoggedIn={isLoggedIn}>\n            <LoginScreen />\n          </PublicRouter>\n\n          <PublicRouter exact path=\"/register\" isLoggedIn={isLoggedIn}>\n            <RegisterScreen />\n          </PublicRouter>\n\n          <PrivateRouter exact path=\"/\" isLoggedIn={isLoggedIn}>\n            <Home />\n          </PrivateRouter>\n\n          <PrivateRouter\n            exact\n            path=\"/questions/:categoryId\"\n            isLoggedIn={isLoggedIn}\n          >\n            <RandomQuestion />\n          </PrivateRouter>\n\n          <PrivateRouter\n            exact\n            path=\"/scores/:categoryId\"\n            isLoggedIn={isLoggedIn}\n          >\n            <ScoreScreen />\n          </PrivateRouter>\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n};\n","import { AppRouter } from './routes/AppRouter';\n\nexport const App = () => {\n  return <AppRouter />;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport { ApolloClient, createHttpLink, ApolloProvider } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { cache } from './cache';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\nimport './css/styles.css';\nimport { URI } from './utils/config-env';\n\nconst httpLink = createHttpLink({\n  uri: URI,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache,\n  name: 'Trivia',\n  version: '1.0',\n});\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n","const URI = process.env.REACT_APP_URI;\n\nexport { URI };\n"],"sourceRoot":""}